

import discord
from discord.ext import commands
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

categories = {
    "üå± ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•": {"‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏• (0.25‡∏ø/Lv)": 0.25},
    "üí∞ ‡πÄ‡∏á‡∏¥‡∏ô": {"‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß 1M": 1, "‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡πà‡∏ß‡∏á 1K": 1},
    "‚ô£Ô∏è ‡πÑ‡∏≠‡πÄ‡∏ó‡∏°": {"‡∏´‡∏°‡∏ß‡∏Å": 25, "‡∏Å‡∏£‡∏∞‡∏à‡∏Å": 25, "6 ‡∏´‡∏°‡∏±‡∏î": 30, "‡∏•‡πà‡∏≤‡∏•‡∏¥‡πÄ‡∏ß‡∏µ‡∏¢‡∏ó‡∏≤‡∏ô 50 (‡∏´‡∏°‡∏±‡∏î 70)": 50},
    "üó°Ô∏è ‡∏≠‡∏≤‡∏ß‡∏∏‡∏ò": {
        "‡∏™‡∏°‡∏≠": 25, "‡∏ã‡∏π‡∏ó‡∏¥‡∏ï‡∏∞": 25, "‡∏¢‡∏≤‡∏°‡∏∞": 25, "‡∏™‡∏≤‡∏°‡πÇ‡∏ã‡πÇ‡∏£": 25,
        "‡∏î‡∏≤‡∏ö‡∏Ñ‡∏π‡πà": 30, "‡∏õ‡∏∑‡∏ô‡∏°‡∏±‡∏á‡∏Å‡∏£": 70, "‡∏Ü‡∏ó‡∏≤‡∏à‡∏¥‡πâ‡∏á‡∏à‡∏≠‡∏Å": 35,
        "‡∏´‡∏≠‡∏Å‡∏°‡∏±‡∏á‡∏Å‡∏£": 50, "‡∏Å‡∏µ‡∏ï‡πâ‡∏≤": 25
    },
    "üî• ‡∏Æ‡∏≤‡∏Ñ‡∏¥ & ‡πÄ‡∏ú‡πà‡∏≤": {
        "‡πÑ‡∏ã‡∏ö‡∏≠‡∏£‡πå‡∏Å": 35, "‡∏Å‡∏π‡∏•": 40,
        "V4 T1‚ÄìT10 (Override)": 60,
        "‡∏°‡∏±‡∏á‡∏Å‡∏£ V4 T10": 250,
        "‡∏Æ‡∏≤‡∏Ñ‡∏¥‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏∏ V2": 50
    }
}

carts = {}
user_ticket_channels = {}
ROLE_IDS = [1416003008680038420, 1415985351008456825]

def calculate_total(user_id):
    return sum(float(item.split("-")[-1].replace("‡∏ø","")) for item in carts.get(user_id, []))

async def create_ticket_channel(user, guild):
    if user.id in user_ticket_channels:
        return guild.get_channel(user_ticket_channels[user.id])
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True)
    }
    ticket_number = len(user_ticket_channels) + 1
    channel = await guild.create_text_channel(
        name=f"ticket-{ticket_number:04}",
        overwrites=overwrites,
        reason="‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤"
    )
    user_ticket_channels[user.id] = channel.id
    roles_mention = " ".join([f"<@&{r}>" for r in ROLE_IDS])
    await channel.send(f"{roles_mention} New ticket created by {user.mention}!")
    await channel.send("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á", view=CloseTicketView(channel))
    return channel

class QuantityModal(discord.ui.Modal):
    def __init__(self, item_name, price):
        super().__init__(title=f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {item_name}")
        self.item_name = item_name
        self.price = price
        self.qty_input = discord.ui.TextInput(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", placeholder="‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", required=True, max_length=5)
        self.add_item(self.qty_input)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            qty = int(self.qty_input.value)
            if qty < 1:
                raise ValueError
        except:
            await interaction.response.send_message("‚ùå ‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", ephemeral=True)
            return
        user_id = interaction.user.id
        carts.setdefault(user_id, []).append(f"{self.item_name} x{qty} - {self.price*qty}‡∏ø")
        total = calculate_total(user_id)
        await interaction.response.send_message(f"üõí ‡πÄ‡∏û‡∏¥‡πà‡∏° {self.item_name} x{qty} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏£‡∏ß‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {total}‡∏ø", ephemeral=True)

class ProductButton(discord.ui.Button):
    def __init__(self, label, price, category):
        super().__init__(label=f"{label} :: {price}‡∏ø", style=discord.ButtonStyle.secondary)
        self.item = label
        self.price = price
        self.category = category

    async def callback(self, interaction: discord.Interaction):
        if self.category in ["üå± ‡∏ü‡∏≤‡∏£‡πå‡∏°‡πÄ‡∏•‡πÄ‡∏ß‡∏•", "üí∞ ‡πÄ‡∏á‡∏¥‡∏ô"]:
            await interaction.response.send_modal(QuantityModal(self.item, self.price))
        else:
            user_id = interaction.user.id
            carts.setdefault(user_id, []).append(f"{self.item} - {self.price}‡∏ø")
            total = calculate_total(user_id)
            await interaction.response.send_message(f"üõí ‡πÄ‡∏û‡∏¥‡πà‡∏° {self.item} ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ ‡∏£‡∏ß‡∏°‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: {total}‡∏ø", ephemeral=True)

class RemoveItemButton(discord.ui.Button):
    def __init__(self, label, index, user_id):
        super().__init__(label=label, style=discord.ButtonStyle.danger)
        self.index = index
        self.user_id = user_id

    async def callback(self, interaction):
        try:
            removed_item = carts[self.user_id].pop(self.index)
            await interaction.response.send_message(f"üóëÔ∏è ‡∏•‡∏ö {removed_item} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)
        except:
            await interaction.response.send_message("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", ephemeral=True)

class ClearCartButton(discord.ui.Button):
    def __init__(self, user_id):
        super().__init__(label="üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", style=discord.ButtonStyle.secondary)
        self.user_id = user_id

    async def callback(self, interaction):
        carts[self.user_id] = []
        await interaction.response.send_message("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

class ConfirmOrderButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠", style=discord.ButtonStyle.success)

    async def callback(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        items = carts.get(user_id, [])
        if not items:
            await interaction.response.send_message("‚ùå ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á", ephemeral=True)
            return
        total = calculate_total(user_id)
        content = f"**‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å {interaction.user.display_name}**\n\n"
        content += "\n".join(items)
        content += f"\n\n**‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total}‡∏ø**"
        channel = await create_ticket_channel(interaction.user, interaction.guild)
        await channel.send(content)
        carts[user_id] = []
        await interaction.response.send_message("‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", ephemeral=True)

class ManageCartView(discord.ui.View):
    def __init__(self, user_id):
        super().__init__(timeout=None)
        self.user_id = user_id
        items = carts.get(user_id, [])
        for idx, item in enumerate(items):
            self.add_item(RemoveItemButton(label=f"‚ùå {item}", index=idx, user_id=user_id))
        if items:
            self.add_item(ClearCartButton(user_id=user_id))
            self.add_item(ConfirmOrderButton())

class ViewCartButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="üõí ‡∏î‡∏π‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", style=discord.ButtonStyle.success)

    async def callback(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        items = carts.get(user_id, [])
        if not items:
            await interaction.response.send_message("‚ùå ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á", ephemeral=True)
            return
        embed = discord.Embed(
            title=f"{interaction.user.display_name} ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
            description="\n".join(items) + f"\n\n**‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {calculate_total(user_id)}‡∏ø**",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed, view=ManageCartView(user_id), ephemeral=True)

class CategoryView(discord.ui.View):
    def __init__(self, category_name):
        super().__init__(timeout=None)
        for item, price in categories[category_name].items():
            self.add_item(ProductButton(item, price, category_name))
        self.add_item(ViewCartButton())

class CategoryButton(discord.ui.Button):
    def __init__(self, label):
        super().__init__(label=label, style=discord.ButtonStyle.primary)
        self.cat_name = label

    async def callback(self, interaction):
        if self.cat_name in categories:
            embed = discord.Embed(
                title=f"{self.cat_name}",
                description="\n".join([f"‚ñ∏ {item} :: {price}‡∏ø" for item, price in categories[self.cat_name].items()]),
                color=discord.Color.purple()
            )
            await interaction.response.send_message(embed=embed, view=CategoryView(self.cat_name), ephemeral=True)

class MainCategoryView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        for cat in categories.keys():
            self.add_item(CategoryButton(cat))

class CloseTicketView(discord.ui.View):
    def __init__(self, channel):
        super().__init__(timeout=None)
        self.channel = channel
        self.add_item(CloseTicketButton(channel))

class CloseTicketButton(discord.ui.Button):
    def __init__(self, channel):
        super().__init__(label="üîí ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á", style=discord.ButtonStyle.danger)
        self.channel = channel

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ?", view=ConfirmCloseView(self.channel), ephemeral=True)

class ConfirmCloseView(discord.ui.View):
    def __init__(self, channel):
        super().__init__(timeout=None)
        self.channel = channel
        self.add_item(ConfirmCloseButton(channel))
        self.add_item(CancelCloseButton())

class ConfirmCloseButton(discord.ui.Button):
    def __init__(self, channel):
        super().__init__(label="‚úÖ ‡πÉ‡∏ä‡πà ‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á", style=discord.ButtonStyle.success)
        self.channel = channel

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message("‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
        for uid, cid in list(user_ticket_channels.items()):
            if cid == self.channel.id:
                del user_ticket_channels[uid]
        await self.channel.delete()

class CancelCloseButton(discord.ui.Button):
    def __init__(self):
        super().__init__(label="‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", style=discord.ButtonStyle.secondary)

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_message("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏´‡πâ‡∏≠‡∏á", ephemeral=True)

@bot.command()
async def mj(ctx):
    embed = discord.Embed(
        title="Miku store ",
        description="Miku ‡∏£‡∏±‡∏ö‡∏à‡πâ‡∏≤‡∏á‡∏ü‡∏≤‡∏°‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ:",
        color=discord.Color.gold()
    )
    await ctx.send(embed=embed, view=MainCategoryView())

bot.run(TOKEN)

